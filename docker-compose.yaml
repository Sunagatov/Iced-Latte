version: '3.9'
services:

  #
  # Mongo Database
  #
  mongodb:
    image: "mongo:latest"
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    ports:
      - '27017:27017'
    networks:
      - online-store-network
    profiles:
      - dev
      - test
      - prod

  #
  # Postgresql Database
  #
  postgresdb:
    image: 'postgres:13.11-bullseye'
    container_name: postgresdb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testdb
    ports:
      - '5432:5432'
    networks:
      - online-store-network
    profiles:
      - dev
      - test
      - prod

  #
  # Online Store App
  #
  online-store-app:
    image: 'online-store/online-store:latest'
    container_name: online-store-app
    build:
      context: ./
      dockerfile: docker/online-store-app/Dockerfile
    ports:
      - '8083:8083'
    user: root
    environment:
      AWS_ENDPOINT_URL: http://awslocal:4566
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - mongodb
    deploy:
      replicas: 1
    networks:
      - online-store-network
    profiles:
      - test

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: ./elastic-stack/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elastic-stack/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./elastic-stack/setup/helpers.sh:/helpers.sh:ro,Z
      - ./elastic-stack/setup/roles:/roles:ro,Z
      - ./elastic-stack/setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - online-store-network
    depends_on:
       online-store-app:
          condition: service_healthy
    profiles:
      - prod

  #
  # ELASTICSEARCH
  #
  elasticsearch:
    build:
      context: ./elastic-stack/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elastic-stack/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./elastic-stack/elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node # Use single node discovery in order to disable production mode and avoid bootstrap checks.
    networks:
      - online-store-network
    profiles:
      - prod

  #
  # LOGSTASH
  #
  logstash:
    build:
      context: ./elastic-stack/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elastic-stack/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elastic-stack/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - '5044:5044'
      - '50000:50000/tcp'
      - '50000:50000/udp'
      - '9600:9600'
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - online-store-network
    depends_on:
      - elasticsearch
    profiles:
      - prod

  #
  # KIBANA
  #
  kibana:
    build:
      context: ./elastic-stack/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elastic-stack/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - '5601:5601'
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - online-store-network
    depends_on:
      - elasticsearch
    profiles:
      - prod

  #
  # Localstack
  #
  localstack:
    image: 'localstack/localstack:latest'
    container_name: localstack
    build:
      context: ./
      dockerfile: docker/localstack/Dockerfile
    hostname: awslocal
    ports:
      - '4566:4566'
      - '4510-4559:4510-4559'
    user: root
    environment:
      DEBUG: 0
      SERVICES: "sqs,sns,dynamodb"
      HOSTNAME_EXTERNAL: awslocal
      PERSISTENCE: "/var/lib/localstack/state"
      AWS_DEFAULT_REGION: us-east-1
      DYNAMODB_SHARE_DB: 1
      DYNAMODB_IN_MEMORY: 1
      EDGE_PORT: 4566
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./init-scripts/localstack:/etc/localstack/init/ready.d"
    networks:
      - online-store-network
    profiles:
      - aws

  sonarqube:
    image: sonarqube:latest
    container_name: onlinestore-sonarqube
    ports:
      - "9000:9000"
    networks:
      - online-store-network
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    profiles:
      - dev

networks:
  online-store-network:
    driver: bridge

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins: