openapi: "3.0.3"

info:
  title: "Iced Latte Payment API"
  description: "API for accessing payment and related operations in the Iced-Latte platform"
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://dev.api.it-sl.ru"
    description: "Production server"

tags:
  - name: "Payment"
    description: "An API for managing and retrieving payment information"

paths:
  /api/v1/payment:
    post:
      tags:
        - "Payment"
      summary: "Enables payment processing using a card details token ID"
      operationId: "processPayment"
      parameters:
        - name: "cardDetailsTokenId"
          in: "query"
          required: true
          schema:
            type: "string"
            minLength: 1
      responses:
        "200":
          description: "Payment processed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessedPaymentWithClientSecretDto"
        "400":
          description: "Cannot retrieve stripe customer by stripeCustomerId = {stripeCustomerId}. 
          Cannot retrieve payment method associated with stripe customer, stripeCustomerId = {stripeCustomerId}. 
          The payment associated with customer is not found, stripeCustomerId = {stripeCustomerId}. 
          Shopping cart with shoppingCartId = %s is already paid"
          content:
            application/json:
              example:
                messages: ["Invalid card details token ID provided."]
                description: "The request to process the payment failed due to invalid input."
                httpStatusCode: "400"
                timestamp: "2023-01-15T09:10:50Z"
              schema:
                $ref: "#/components/schemas/ErrorHandler"
        "404":
          description: "The requested user or payment was not found."
          content:
            application/json:
              example:
                messages: ["User or payment not found."]
                description: "The request to retrieve payment details failed because the user or payment does not exist."
                httpStatusCode: "404"
                timestamp: "2023-01-15T09:10:50Z"
              schema:
                $ref: "#/components/schemas/ErrorHandler"

  /api/v1/payment/{paymentId}:
    get:
      tags:
        - "Payment"
      summary: "Enables to get payment details by payment id"
      operationId: "getPaymentDetails"
      parameters:
        - name: "paymentId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Payment details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessedPaymentDetailsDto"
        "404":
          description: "Payment details not found."
          content:
            application/json:
              example:
                messages: ["Payment details with the specified ID were not found."]
                description: "Failed to retrieve payment details because the payment does not exist."
                httpStatusCode: "404"
                timestamp: "2023-01-15T09:10:50Z"
              schema:
                $ref: "#/components/schemas/ErrorHandler"

  /api/v1/payment/event:
    post:
      tags:
        - "Payment"
      summary: "Enables payment event processing"
      operationId: "paymentEventProcess"
      parameters:
        - name: "Stripe-Signature"
          in: "header"
          required: true
          schema:
            type: "string"
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
              minLength: 1
        required: true
      responses:
        "200":
          description: "Payment event processed successfully"
        "400":
          description: "Error in processing the payment event."
          content:
            application/json:
              example:
                messages: ["Invalid Stripe-Signature provided."]
                description: "Failed to process the payment event due to an invalid signature."
                httpStatusCode: "400"
                timestamp: "2023-01-15T09:10:50Z"
              schema:
                $ref: "#/components/schemas/ErrorHandler"

  /api/v1/payment/card:
    post:
      tags:
        - "Payment"
      summary: "Temporary solution to test the payment API by simulating card detail token generation."
      operationId: "processCardDetailsToken"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardDetailsTokenRequest"
        required: true
      responses:
        "200":
          description: "Card details token created successfully"
          content:
            application/json:
              schema:
                type: "string"
        "400":
          description: "Error in card token creation."
          content:
            application/json:
              example:
                messages: [ "incompatible types -- expected type" ]
                description: "Operation was failed in method: processCardDetailsToken that belongs to the class: PaymentEndpoint. 
                Problematic code line: 4"
                httpStatusCode: "BAD_REQUEST"
                timestamp: "2023-01-15 09:10:50"
              schema:
                $ref: "#/components/schemas/ErrorHandler"

components:
  schemas:
    PaymentStatus:
      type: "object"
      properties:
        status:
          type: "string"
          enum:
            - "PAYMENT_METHOD_IS_REQUIRED"
            - "PAYMENT_CONFIRMATION_IS_REQUIRED"
            - "PAYMENT_CAPTURE_IS_REQUIRED"
            - "PAYMENT_ACTION_IS_REQUIRED"
            - "PAYMENT_IS_FAILED"
            - "PAYMENT_IS_PROCESSING"
            - "PAYMENT_IS_CANCELED"
            - "PAYMENT_IS_SUCCEEDED"
        description:
          type: "string"
          enum:
            - "Payment method is required"
            - "Payment confirmation is required"
            - "Payment capture is required"
            - "Additional action is required to complete payment"
            - "Payment processing error"
            - "Payment in processing"
            - "Payment is canceled"
            - "Payment is succeeded"

    ProcessedPaymentWithClientSecretDto:
      type: "object"
      properties:
        paymentId:
          type: "integer"
          format: "int64"
        clientSecret:
          type: "string"

    ProcessedPaymentDetailsDto:
      type: "object"
      properties:
        paymentId:
          type: "integer"
          format: "int64"
        itemsTotalPrice:
          type: "number"
          format: "decimal"
        paymentIntentId:
          type: "string"
        items:
          type: "array"
          uniqueItems: true
          items:
            $ref: "cart-openapi.yaml#/components/schemas/ShoppingCartItemDto"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        description:
          type: "string"

    CreateCardDetailsTokenRequest:
      type: "object"
      properties:
        cardNumber:
          type: "string"
          minLength: 1
        expMonth:
          type: "string"
          minLength: 1
        expYear:
          type: "string"
          minLength: 1
        cvc:
          type: "string"
          minLength: 1

    ErrorHandler:
      type: "object"
      properties:
        messages:
          type: "array"
          items:
            format: "string"
        description:
          type: "string"
        httpStatusCode:
          type: "integer"
          format: "int32"
        timestamp:
          type: "string"
          format: "date-time"